/* *
* Let S be the binary representation of an Integer. We define two functions a(i) and b(i) such that
* a(i) = Number of occurrences of '1' at odd positions of S.
* b(i) = Number of occurrences of '1' at even positions of S.
* For example: for integer 19, S=10011. so, a(19)=2 and b(19)=1
*
* Input: -
* First line contains an integer T. T=Number of test cases. Then T lines follow
* On each line, you will be given three integers M,N,K.
*
* Output: -
* For each test case output a single integer R.
* Where, R is the number of integers 'i' between M and N(both inclusive) such that absolute difference of a(i) and b(i) is equal to K.
* Answer of each each test case should be on separate line
*
* Constraints
* T<=50
* 1<=M<N<=10^19 
* 1<=N-M<=10^6 
* 0<=K<=50
*/
#include<stdio.h>
#include<math.h>
program by Chinmoy Das
int main() {
    long long unsigned t, k, a, b, x, y, z, m, n, i;
    scanf("%llu", &t);
    while( t-- ) {
        z=0;
        scanf("%llu%llu%llu", &m, &n, &k);
        i=m;
        while( i<=n ) {
            a=(long long unsigned)(floor(log(i)/(log(2))))+1;
            b=i;
            x=y=0;
            while( b>0 ) {
                if( b%2==1 ) {
                    if( a%2==1 ) {
                        x++;//odd positions
                    }
                    else {
                        y++;//even positions
                    }
                }
                a--;
                b/=2;
            }
            if( x>y ) {
                x-=y;
                if( x==k ) {
                    z++;
                }
            }
            else {
                y=y-x;
                if( y==k ) {
                    z++;
                }
            }
            i++;
        }
        printf("%llu\n", z);
    }
    return 0;
}